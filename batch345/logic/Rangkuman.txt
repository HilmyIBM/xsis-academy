Syntaks = menggunakan notasi
Semantics = bentuk dari program
Pragmatics = penggunaan bahasa pemrograman dalam prakteknya

-- Paradigma pemrograman
Procedural = mengkombinasikan banyak perintah
Fungsional = konsep matematika (rekursif) dan bersifat immutable
Logic = Fokus dalam pemecahan masalah
OOP = Terdiri dari interaksi objek

--GIT
Version Control yang terdistribusi

-- Java Packages
Built in packages dan user efince packages
(build in seperti memakai 'import')
(User define seperti menggunakan package diri sendiri)

-- primitive data type
boolean, numeric

-- Arrays
semua arrays adalah object
object di java berasal dari class (setiap array) adalah objek
mengurutkan array Arrays.sort()

-- arrayList
array yang bisa digunakan variable lengthnya
ada beberapa method seperti get(index),set(index,value),remove(index),clear(),size()
untuk sorting array memakai Collections.sort(arrayList)

-- String
untuk mengetahui panjangnya menggunakan length()
method: 
- equalsIgnoreCase(), equals(), isEmpty(), toUpperCase(), toLowerCase()
- indexOf(kata), substring(index,index2), valueOf(), trim(), replace(before,after)
- startsWith(kata), endsWith(kata), split(`regex`), join(kata1,kata2,kata...)
- toCharArray()
- indexOf(nomor), contains(target_kata)
- replaceAll(regex,ubahKeHurufApa)
- String.format("formatnya ", data, data, dataa...)

-- Character
dari char[] ke string menggunakan Arrays.toString()

-- Recursion
- method memanggil dirinya sendiri

-- OOP
procedural programming adalah prosedur untuk melakukan operasi data,
sedangkan oop tentang membuat objek yang berisi keduanya data dan methods.
- lebih cepat, dan mudah dieksekusi,
- DRY (Don't repeat your self)
- menyediakan struktur yang jelas untuk program
- reusable
- mudah dimaintain

-- Class
class di java terdiri dari fields, methods, constructors, static initializers, instance initializers

-- Non Access Modifier
Final (Class tidak bisa diextend oleh class lain)
Abstract (Class tidak bisa dibuat objectnya)
- atribute
    Final(Atribute dan method tidak bisa di override/dirubah)
    Static (Atribute dan method dimiliki oleh class, lebih tepatnya adalah object)
    Abstract (hanya bia digunakan methodnya, tetapi method tidak memiliki body)

kenapa harus enkapsulasi?
dikarenakan memperkuat sekurity, class menjadi read-only/write-only

Subclass(class yang diwariskan dari class lain) - Child
Superclass(class yang mewariskan) - Parent

Polymorphism (Inheritance, method sama tetapi beda tugas)

Interface (tidak memiliki body, sepenuhnya adalah Abstract class)

LocalDate - tanggal sekarang
LocalTime - jam sekarang
LocalDateTime - tanggal dan jam sekarang
DateTimeFormatter - format tanggal/jam
LocalDate.now() - ambil tanggal sekarang

long digunakan saat menghitung ChronoUnit
ChronoUnit.[...].between(start,end) -- menghitung selisih
seconds,minutes,hours,days,months,years

LocalTime.parse(time,DateTimeFormatter.ofPatter("HH:mm")).format(DateTimeFormatter.ofPatter("hh:mm a"))

4. Predefined Character Classes
\d is equivalent to [0-9] (matches any digit).
\w is equivalent to [a-zA-Z0-9_] (matches any alphanumeric character or underscore).
\s is equivalent to [ \t\n\r\f] (matches any whitespace character).
[^]

SQL

column = attribute
row = records / tuple
view = menyimpan table temporare dari query (tidak sesuai dengan updatan data)
DDL = hal yang berkaitan dengan pembuatan dan penghapusan object (create, drop)
DML = select, update, delete, insert
DCL = mengatur permission

postgres memiliki - transactional, subselect, views, foreign ke, locking
syarat untuk koneksi ke postgres adalah dengan jaringan tcp/ip

create view {nama view} as {querynya};
drop view {nama view}; 

create index {nama index} on {nama table}(nama column);

alter table {nama table};
- add constraint {nama constraint} unique (nama column)
- add constraint {nama constraint} foreign key (nama column) references {nama table} (nama column target)
- drop constraint {nama constraint}
- add primary key (nama column)
- rename column {column lama} to {column baru}
- alter column {nama column} type {tipe data}

update {nama table}
set (column) = 'value', (column) = 'value' where bla bla = bla bla returning *;

delete from {nama table}
where bla bla = bla bla;